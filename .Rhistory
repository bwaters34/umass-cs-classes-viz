layer_points(p)
layer_points(myPlot)
myPlot <- ggvis(coordinateClasses, x = ~coordinateClasses[,1], y = ~coordinateClasses[,2])
names(coordinateClasses)
names(coordinateClasses)[,1] <- "component1"
print(coordinateClasses)
View(coordinateClasses)
colnames(coordinateClasses)
colnames(coordinateClasses) <- c("a","b")
colnames(coordinateClasses)
colnames(coordinateClasses) <- c("component1, component2")
colnames(coordinateClasses) <- c("component1", "component2")
myPlot <- ggvis(coordinateClasses, x = ~component1, y = ~component2)
label_points(myPlot)
layer_points(myPlot)
mtcars
type(coordinateClasses)
mode(coordinateClasses)
help(ggvis)
coordinateClasses <- data.frame(coordinateClasses)
myPlot <- ggvis(coordinateClasses, x = ~component1, y = ~component2)
layer_points(myPlot)
coordinateClasses %>%
ggvis(x =x = ~component1, y = ~component2) %>%
layer_points()
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2) %>%
layer_points()
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, stroke = ~component1) %>%
layer_points()
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill = ~component1) %>%
layer_points()
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black") %>%
layer_points()
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black") %>%
layer_points()
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black", size := input_slider(10,100) %>%
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black", size := input_slider(10,100)) %>%
layer_points()
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black", size := input_slider(10,100)) %>%
layer_points()
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black", size := input_slider(10,100)) %>%
layer_points()
help("add_tooltip"
)
help(paste0)
help(format)
if (interactive()) {
all_values <- function(x) {
if(is.null(x)) return(NULL)
paste0(names(x), ": ", format(x), collapse = "<br />")
}
base <- mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
base %>% add_tooltip(all_values, "hover")
base %>% add_tooltip(all_values, "click")
# The data sent from client to the server contains only the data columns that
# are used in the plot. If you want to get other columns of data, you should
# to use a key to line up the item from the plot with a row in the data.
mtc <- mtcars
mtc$id <- 1:nrow(mtc)  # Add an id column to use ask the key
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- mtc[mtc$id == x$id, ]
paste0(names(row), ": ", format(row), collapse = "<br />")
}
mtc %>% ggvis(x = ~wt, y = ~mpg, key := ~id) %>%
layer_points() %>%
add_tooltip(all_values, "hover")
}
rownames(coordinateClasses)
rownames (allClasses)
rownames(kMeansMatrix)
colnames(coordinateClasses) <- c("component1", "component2")
rownames(coordinateClasses) <- rownames(kMeansMatrix)
rownames(coordinateClasses)
rownames(coordinateClasses)[1]
rownames(coordinateClasses)[3]
rownames(coordinateClasses)[55]
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black", size := input_slider(10,100)) %>%
layer_points() %>%
add_tooltip(function(x) rownames(x))
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black", size := input_slider(10,100)) %>%
layer_points() %>%
add_tooltip(className, "hover")
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black") %>%
layer_points() %>%
add_tooltip(className, "hover")
names(coordinateClasses[1,1])
names(coordinateClasses)
className <- function(x){
if(is.null(x)) return(NULL)
paste0(20)
}
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black") %>%
layer_points() %>%
add_tooltip(className, "hover")
if (interactive()) {
all_values <- function(x) {
if(is.null(x)) return(NULL)
paste0(names(x), ": ", format(x), collapse = "<br />")
}
base <- mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
base %>% add_tooltip(all_values, "hover")
base %>% add_tooltip(all_values, "click")
}
className <- function(x){
if(is.null(x)) return(NULL)
paste0("Coordinates: ", x$component1, ", ", x$component2)
}
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black") %>%
layer_points() %>%
add_tooltip(className, "hover")
addRow
coordinateClasses$classNames <- allClasses
coordinateClasses$classNames
className <- function(x){
if(is.null(x)) return(NULL)
paste0("Coordinates: ", x$component1, ", ", x$component2, x$classNames)
}
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black") %>%
layer_points() %>%
add_tooltip(className, "hover")
coordinateClasses$id <- 1:nrow(coordinateClasses)
names(coordinateClasses)
names(coordinateClasses[2])
names(coordinateClasses[1])
names(coordinateClasses[4])
coordinateClasses
View(coordinateClasses)
coordinateClasses[1]
coordinateClasses[2]
coordinateClasses[3]
View(coordinateClasses)
View(coordinateClasses)
coordinateClasses[1,3]
help(tapply)
coordinateClasses[3]
coordinateClasses[1,4]
coordinateClasses[2,4]
coordinateClasses[2,3]
coordinateClasses[1]
coordinateClasses[1]$classNames
coordinateClasses[1,]$classNames
className <- function(x){
if(is.null(x)) return(NULL)
row <- x$id
paste0("Coordinates: ", coordinateClasses[row,]$component1, ", ", x$component2, coordinateClasses[row,]$classNames)
}
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black", key:= ~id) %>%
layer_points() %>%
add_tooltip(className, "hover")
coordinateClasses[2,]$classNames
className <- function(x){
if(is.null(x)) return(NULL)
row <- x$id
paste0("Coordinates: ", coordinateClasses[row,]$component1, ", ", x$component2, ", ",coordinateClasses[row,]$classNames)
}
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black", key:= ~id) %>%
layer_points() %>%
add_tooltip(className, "hover")
allClasses
allClasses = sort(unique(stackedClasses[1])[,1],decreasing = FALSE)
allClasses = allClasses[-1] #remove empty string at top of list
allClasses
coordinateClasses$classNames <- allClasses
coordinateClasses$id <- 1:nrow(coordinateClasses) #used as a key for tooltips
className <- function(x){
if(is.null(x)) return(NULL)
row <- x$id
paste0("Class: coordinateClasses[row,]$classNames")
}
className <- function(x){
if(is.null(x)) return(NULL)
row <- x$id
paste0("Class:", coordinateClasses[row,]$classNames)
}
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black", key:= ~id) %>%
layer_points() %>%
add_tooltip(className, "hover")
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", stroke := "black", key:= ~id) %>%
layer_points() %>%
add_tooltip(className, "hover")
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", opacity := 0.4, stroke := "black", key:= ~id) %>%
layer_points() %>%
add_tooltip(className, "hover")
help(cmdscale)
coordinateClasses <- cmdscale(dist(kMeansMatrix))
plot(coordinateClasses)
coordinateClasses <- cmdscale(dist(kMeansMatrix),add=FALSE)
plot(coordinateClasses)
coordinateClasses <- cmdscale(dist(kMeansMatrix))
plot(coordinateClasses)
coordinateClasses <- cmdscale(dist(kMeansMatrix))
plot(coordinateClasses)
coordinateClasses <- cmdscale(dist(kMeansMatrix))
plot(coordinateClasses)
help(plotclust)
help(clusplot)
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", opacity := 0.4, stroke := "black", key:= ~id) %>%
layer_points() %>%
add_tooltip(className, "hover")
coordinateClasses <- cmdscale(dist(kMeansMatrix))
plot(coordinateClasses)
colnames(coordinateClasses) <- c("component1", "component2")
rownames(coordinateClasses) <- rownames(kMeansMatrix)
coordinateClasses <- data.frame(coordinateClasses)
coordinateClasses$classNames <- allClasses
coordinateClasses$id <- 1:nrow(coordinateClasses) #used as a key for tooltips
className <- function(x){
if(is.null(x)) return(NULL)
row <- x$id
paste0("Class:", coordinateClasses[row,]$classNames)
}
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", opacity := 0.4, stroke := "black", key:= ~id) %>%
layer_points() %>%
add_tooltip(className, "hover")
help(dist)
dist(kMeansMatrix)
dist_test <- dist(kMeansMatrix)
coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "red", opacity := 0.4, stroke := "black", key:= ~id) %>%
layer_points() %>%
add_tooltip(className, "hover")
plot <- coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "black", opacity := 0.4, key:= ~id) %>%
layer_points()
plot %<% add_tooltip(className, "hover")
plot %<% add_tooltip(className, "click")
plot %>% add_tooltip(className, "hover")
plot %>% add_tooltip(className, "click")
help(which)
which(coordinateClasses$classNames == "320")
which(coordinateClasses$id = 1)
which(coordinateClasses$id == 1)
View(coordinateClasses)
plot %>% add_tooltip(className, "click")
which(coordinateClasses$component1 == -0.96602782)
which(coordinateClasses$component1 == coordinateClasses[40,1])
which(coordinateClasses$component1 == coordinateClasses[18,1])
help(which)
which(round(coordinateClasses$component1, digits = 3) == round(coordinateClasses[18,1],digits=3)
which(round(coordinateClasses$component1, digits = 3) == round(coordinateClasses[18,1],digits=3)
which(round(coordinateClasses$component1, digits = 3) == round(coordinateClasses[18,1],digits=3))
which(round(coordinateClasses$component1, digits = 3) == round(coordinateClasses[11,1],digits=3))
which(round(coordinateClasses$component1, digits = 2) == round(coordinateClasses[11,1],digits=2))
which(round(coordinateClasses$component1, digits = 1) == round(coordinateClasses[11,1],digits=1))
which(round(coordinateClasses$component1, digits = 1) == round(coordinateClasses[11,1],digits=1))
which(round(coordinateClasses$component1, digits = 1) == round(coordinateClasses[20,1],digits=1))
round(coordinateClasses[20,1], digits = 1)
round(coordinateClasses[20,1], digits = 2)
round(coordinateClasses[3,1], digits = 2)
round(coordinateClasses[37,1], digits = 2)
round(coordinateClasses[11,1], digits = 2)
help(round)
trunc(coordinateClasses[11,1])
trunc(coordinateClasses[8,1] )
floor(coordinateClasses[11,1] )
round(coordinateClasses[8,1], digits = 2)
round(coordinateClasses[8,1], digits = 1)
plot %>% add_tooltip(className, "click")
round(coordinateClasses[8,1], digits = 2)
round(0.107, digits = )
round(0.107, digits = )
round(0.107, digits = 2)
plot %>% add_tooltip(className, "click")
library(cluster)
library(fpc)
library(ggvis)
classlist.df <- data.frame(read.csv("bs-cs-tracking-2016.csv",stringsAsFactors = FALSE,strip.white = TRUE,blank.lines.skip = TRUE))
#get list of all classes
stackedClasses <- stack(classlist.df)
allClasses = sort(unique(stackedClasses[1])[,1],decreasing = FALSE)
allClasses = allClasses[-1] #remove empty string at top of list
for(i in 1:length(allClasses)){
allClasses[i] = strsplit(allClasses[i]," ")[[1]][1]
}
kMeansMatrix = matrix(0,nrow=length(allClasses),ncol=ncol(classlist.df))
rownames(kMeansMatrix) <- allClasses
for(r in 1:nrow(kMeansMatrix)){
for(c in 1:ncol(kMeansMatrix)){
if(is.element(allClasses[r],classlist.df[,c])){
#cat(allClasses[r]," is in ",(colnames(classlist.df))[c],"\n")
kMeansMatrix[r,c] <-1
}
}
}
coordinateClasses <- cmdscale(dist(kMeansMatrix))
dist_test <- dist(kMeansMatrix)
plot(coordinateClasses)
colnames(coordinateClasses) <- c("component1", "component2")
rownames(coordinateClasses) <- rownames(kMeansMatrix)
coordinateClasses <- data.frame(coordinateClasses)
coordinateClasses$classNames <- allClasses
coordinateClasses$id <- 1:nrow(coordinateClasses) #used as a key for tooltips
className <- function(x){
if(is.null(x)) return(NULL)
row <- x$id
paste0("Class:", coordinateClasses[row,]$classNames)
}
plot <- coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "black", opacity := 0.4, key:= ~id) %>%
layer_points()
plot %>% add_tooltip(className, "click")
View(kMeansMatrix)
View(kMeansMatrix)
View(kMeansMatrix)
View(kMeansMatrix)
View(kMeansMatrix)
for(r in 1:nrow(kMeansMatrix)){
for(c in 1:ncol(kMeansMatrix)){
if(is.element(allClasses[r],classlist.df[,c])){
#cat(allClasses[r]," is in ",(colnames(classlist.df))[c],"\n")
kMeansMatrix[r,c] <-1
}
}
}
View(kMeansMatrix)
for(r in 1:nrow(kMeansMatrix)){
for(c in 1:ncol(kMeansMatrix)){
if(is.element(allClasses[r],classlist.df[,c])){
cat(allClasses[r]," is in ",(colnames(classlist.df))[c],"\n")
kMeansMatrix[r,c] <-1
}
}
}
classlist.df <- data.frame(read.csv("bs-cs-tracking-2016.csv",stringsAsFactors = FALSE,strip.white = TRUE,blank.lines.skip = TRUE))
stackedClasses <- stack(classlist.df)
allClasses = sort(unique(stackedClasses[1])[,1],decreasing = FALSE)
allClasses = allClasses[-1] #remove empty string at top of list
colnames(classlist.df)
allClasses[5]
kMeansMatrix = matrix(0,nrow=length(allClasses),ncol=ncol(classlist.df))
rownames(kMeansMatrix) <- allClasses
for(r in 1:nrow(kMeansMatrix)){
for(c in 1:ncol(kMeansMatrix)){
if(is.element(allClasses[r],classlist.df[,c])){
cat(allClasses[r]," is in ",(colnames(classlist.df))[c],"\n")
kMeansMatrix[r,c] <-1
}
}
}
kMeansMatrix
View(kMeansMatrix)
coordinateClasses <- cmdscale(dist(kMeansMatrix))
dist_test <- dist(kMeansMatrix)
plot(coordinateClasses)
colnames(coordinateClasses) <- c("component1", "component2")
rownames(coordinateClasses) <- rownames(kMeansMatrix)
coordinateClasses <- data.frame(coordinateClasses)
coordinateClasses$classNames <- allClasses
coordinateClasses$id <- 1:nrow(coordinateClasses) #used as a key for tooltips
className <- function(x){
if(is.null(x)) return(NULL)
row <- x$id
paste0("Class:", coordinateClasses[row,]$classNames)
}
plot <- coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "black", opacity := 0.4, key:= ~id) %>%
layer_points()
plot %>% add_tooltip(className, "hover")
round(-0.44046, digits = 2)
round(-0.44046, digits = 1)
round(-0.156)
round(-0.156,digits = 2)
round(-0.156,digits = 1)
which(coordinateClasses$component1[1])
coordinateClasses$component1[2]
coordinateClasses$className[2]
coordinateClasses$component1[34]
which(round(coordinateClasses$component1[34],digits = 2) == round(coordinateClasses$component1,digits =2))
help(which)
which((1:12) %% 2 == 0)
which((1:12) %% 2 == 0)[1]
which((1:12) %% 2 == 0)[3
]
length(which((1:12) %% 2 == 0))
length(which((1:14) %% 2 == 0))
output <- ""
output <- "a'"
''
output <- "a"
output
output <- paste0(output, "C")
output
className <- function(x){
if(is.null(x)) return(NULL)
row <- x$id
correspondingClasses <- which(round(coordinateClasses$component1[row],digits = 2) == round(coordinateClasses$component1,digits =2))
output <- ""
for(i in 1:length(correspondingClasses)){
output <-  paste0(output,"\nClass:", coordinateClasses[correspondingClasses[i],]$classNames)
}
paste0(output)
}
plot <- coordinateClasses %>%
ggvis(x = ~component1, y = ~component2, fill := "black", opacity := 0.4, key:= ~id) %>%
layer_points()
plot %>% add_tooltip(className, "hover")
View(kMeansMatrix)
View(kMeansMatrix)
sort(kMeansMatrix)
t(apply(t(kMeansMatrix),2,sort))
sortedClasses <- t(apply(t(kMeansMatrix),2,sort))
View(sortedClasses)
kMeansMatrix[order(kMeansMatrix[1],kMeansMatrix[2],kMeansMatrix[3],kMeansMatrix[4],kMeansMatrix[5],kMeansMatrix[6],kMeansMatrix[7],kMeansMatrix[8],kMeansMatrix[9],kMeansMatrix[10],kMeansMatrix[11])
]
kMeansMatrix[do.call(order, lapply(1:NCOL(kMeansMatrix), function(i) kMeansMatrix[, i])), ]
sortedClasses <- kMeansMatrix[do.call(order, lapply(1:NCOL(kMeansMatrix), function(i) kMeansMatrix[, i])), ]
View(stackedClasses)
View(sortedClasses)
rowSums
rowSums(kMeansMatrix)
sorted <- sort(rowSums(kMeansMatrix))
sorted
clear
sorted
plot(sorted)
library(visNetwork)
classlist.df <- data.frame(read.csv("bs-cs-tracking-2016.csv",stringsAsFactors = FALSE,strip.white = TRUE,blank.lines.skip = TRUE))
#get list of all classes
stackedClasses <- stack(classlist.df)
allClasses = sort(unique(stackedClasses[1])[,1],decreasing = FALSE)
allClasses = allClasses[-1] #remove empty string at top of list
numClasses <- length(allClasses)
numSubplans <- ncol(classlist.df)
edges.df <- data.frame(from=integer(), to=integer())
kMeansMatrix = matrix(0,nrow=length(allClasses),ncol=ncol(classlist.df))
rownames(kMeansMatrix) <- allClasses
for(r in 1:nrow(kMeansMatrix)){
for(c in 1:ncol(kMeansMatrix)){
cat(allClasses[r]," is in ",(colnames(classlist.df))[c],"\n")
edges.df <-rbind(edges.df, c(r,c+numClasses))
if(is.element(allClasses[r],classlist.df[,c])){
#edges.df <-rbind(edges.df, c("hi","ho"))
}
}
}
colnames(edges.df) <- c("from","to")
#what we need
#list of nodes:  nodes include:
#tracks and classes
#list of edges:  contain from and to
nodeList <- c(allClasses,colnames(classlist.df))
sizes <- rep(5,numClasses)
sizes <- c(sizes, rep(15,numSubplans))
nodes.df <- data.frame(1:length(nodeList),nodeList)
colnames(nodes.df) <- c("id","label") #add group
nodes.df$size <- sizes
nodes.df$color.highlight.background <- "orange"
nodes.df$color.highlight.border <- "darkred"
#todo:
#being able to select subplans?
#add search feature
visNetwork(nodes = nodes.df, edges = edges.df)
library(visNetwork)
classlist.df <- data.frame(read.csv("bs-cs-tracking-2016.csv",stringsAsFactors = FALSE,strip.white = TRUE,blank.lines.skip = TRUE))
#get list of all classes
stackedClasses <- stack(classlist.df)
allClasses = sort(unique(stackedClasses[1])[,1],decreasing = FALSE)
allClasses = allClasses[-1] #remove empty string at top of list
numClasses <- length(allClasses)
numSubplans <- ncol(classlist.df)
edges.df <- data.frame(from=integer(), to=integer())
kMeansMatrix = matrix(0,nrow=length(allClasses),ncol=ncol(classlist.df))
rownames(kMeansMatrix) <- allClasses
for(r in 1:nrow(kMeansMatrix)){
for(c in 1:ncol(kMeansMatrix)){
if(is.element(allClasses[r],classlist.df[,c])){
cat(allClasses[r]," is in ",(colnames(classlist.df))[c],"\n")
edges.df <-rbind(edges.df, c(r,c+numClasses))
#edges.df <-rbind(edges.df, c("hi","ho"))
}
}
}
colnames(edges.df) <- c("from","to")
#what we need
#list of nodes:  nodes include:
#tracks and classes
#list of edges:  contain from and to
nodeList <- c(allClasses,colnames(classlist.df))
sizes <- rep(5,numClasses)
sizes <- c(sizes, rep(15,numSubplans))
nodes.df <- data.frame(1:length(nodeList),nodeList)
colnames(nodes.df) <- c("id","label") #add group
nodes.df$size <- sizes
nodes.df$color.highlight.background <- "orange"
nodes.df$color.highlight.border <- "darkred"
#todo:
#add search feature
#being able to select subplans?
visNetwork(nodes = nodes.df, edges = edges.df)
