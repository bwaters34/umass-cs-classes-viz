}
colnames(edges.df) <- c("from","to")
#what we need
#list of nodes:  nodes include:
#tracks and classes
#list of edges:  contain from and to
nodeList <- c(allClasses,colnames(classlist.df))
sizes <- rep(5,numClasses)
sizes <- c(sizes, rep(15,numSubplans))
nodes.df <- data.frame(1:length(nodeList),nodeList)
colnames(nodes.df) <- c("id","label") #add group
nodes.df$size <- sizes
nodes.df$color.highlight.background <- "orange"
nodes.df$color.highlight.border <- "darkred"
#todo:
#being able to select subplans?
#add search feature
visNetwork(nodes = nodes.df, edges = edges.df)
library(visNetwork)
classlist.df <- data.frame(read.csv("bs-cs-tracking-2016.csv",stringsAsFactors = FALSE,strip.white = TRUE,blank.lines.skip = TRUE))
#get list of all classes
stackedClasses <- stack(classlist.df)
allClasses = sort(unique(stackedClasses[1])[,1],decreasing = FALSE)
allClasses = allClasses[-1] #remove empty string at top of list
numClasses <- length(allClasses)
numSubplans <- ncol(classlist.df)
edges.df <- data.frame(from=integer(), to=integer())
kMeansMatrix = matrix(0,nrow=length(allClasses),ncol=ncol(classlist.df))
rownames(kMeansMatrix) <- allClasses
for(r in 1:nrow(kMeansMatrix)){
for(c in 1:ncol(kMeansMatrix)){
if(is.element(allClasses[r],classlist.df[,c])){
cat(allClasses[r]," is in ",(colnames(classlist.df))[c],"\n")
edges.df <-rbind(edges.df, c(r,c+numClasses))
#edges.df <-rbind(edges.df, c("hi","ho"))
}
}
}
colnames(edges.df) <- c("from","to")
#what we need
#list of nodes:  nodes include:
#tracks and classes
#list of edges:  contain from and to
nodeList <- c(allClasses,colnames(classlist.df))
sizes <- rep(5,numClasses)
sizes <- c(sizes, rep(15,numSubplans))
nodes.df <- data.frame(1:length(nodeList),nodeList)
colnames(nodes.df) <- c("id","label") #add group
nodes.df$size <- sizes
nodes.df$color.highlight.background <- "orange"
nodes.df$color.highlight.border <- "darkred"
#todo:
#add search feature
#being able to select subplans?
visNetwork(nodes = nodes.df, edges = edges.df)
---
title: "demonstration"
author: "Brennan Waters"
date: "December 1, 2016"
output: html_document
runtime: shiny
---
This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.
To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
## Inputs and Outputs
You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.
```{r, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
## Embedded Application
It's also possible to embed an entire Shiny application within an R Markdown document using the `shinyAppDir` function. This example embeds a Shiny application located in another directory:
```{r, echo=FALSE}
shinyAppDir(
system.file("examples/06_tabsets", package="shiny"),
options=list(
width="100%", height=550
)
)
```
Note the use of the `height` parameter to determine how much vertical space the embedded application should occupy.
You can also use the `shinyApp` function to define an application inline rather then in an external directory.
In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.
---
title: "demonstration"
author: "Brennan Waters"
date: "December 1, 2016"
output: html_document
runtime: shiny
---
This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.
To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
## Inputs and Outputs
You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.
```{r, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
## Embedded Application
It's also possible to embed an entire Shiny application within an R Markdown document using the `shinyAppDir` function. This example embeds a Shiny application located in another directory:
```{r, echo=FALSE}
shinyAppDir(
system.file("examples/06_tabsets", package="shiny"),
options=list(
width="100%", height=550
)
)
```
Note the use of the `height` parameter to determine how much vertical space the embedded application should occupy.
You can also use the `shinyApp` function to define an application inline rather then in an external directory.
In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.
---
title: "demonstration"
author: "Brennan Waters"
date: "December 1, 2016"
output: html_document
runtime: shiny
---
This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.
To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
## Inputs and Outputs
You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.
```{r, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
## Embedded Application
It's also possible to embed an entire Shiny application within an R Markdown document using the `shinyAppDir` function. This example embeds a Shiny application located in another directory:
```{r, echo=FALSE}
shinyAppDir(
system.file("examples/06_tabsets", package="shiny"),
options=list(
width="100%", height=550
)
)
```
Note the use of the `height` parameter to determine how much vertical space the embedded application should occupy.
You can also use the `shinyApp` function to define an application inline rather then in an external directory.
In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.
---
title: "demonstration"
author: "Brennan Waters"
date: "December 1, 2016"
output: html_document
runtime: shiny
---
This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.
To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
## Inputs and Outputs
You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.
```{r, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
## Embedded Application
It's also possible to embed an entire Shiny application within an R Markdown document using the `shinyAppDir` function. This example embeds a Shiny application located in another directory:
```{r, echo=FALSE}
shinyAppDir(
system.file("examples/06_tabsets", package="shiny"),
options=list(
width="100%", height=550
)
)
```
Note the use of the `height` parameter to determine how much vertical space the embedded application should occupy.
You can also use the `shinyApp` function to define an application inline rather then in an external directory.
In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.
---
title: "demonstration"
author: "Brennan Waters"
date: "December 1, 2016"
output: html_document
runtime: shiny
---
This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.
To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
## Inputs and Outputs
You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.
```{r, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
## Embedded Application
It's also possible to embed an entire Shiny application within an R Markdown document using the `shinyAppDir` function. This example embeds a Shiny application located in another directory:
```{r, echo=FALSE}
shinyAppDir(
system.file("examples/06_tabsets", package="shiny"),
options=list(
width="100%", height=550
)
)
```
Note the use of the `height` parameter to determine how much vertical space the embedded application should occupy.
You can also use the `shinyApp` function to define an application inline rather then in an external directory.
In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.
---
title: "demonstration"
author: "Brennan Waters"
date: "December 1, 2016"
output: html_document
runtime: shiny
---
This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.
To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
## Inputs and Outputs
You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.
```{r, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
## Embedded Application
It's also possible to embed an entire Shiny application within an R Markdown document using the `shinyAppDir` function. This example embeds a Shiny application located in another directory:
```{r, echo=FALSE}
shinyAppDir(
system.file("examples/06_tabsets", package="shiny"),
options=list(
width="100%", height=550
)
)
```
Note the use of the `height` parameter to determine how much vertical space the embedded application should occupy.
You can also use the `shinyApp` function to define an application inline rather then in an external directory.
In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.
---
title: "demonstration"
author: "Brennan Waters"
date: "December 1, 2016"
output: html_document
runtime: shiny
---
This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.
To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
## Inputs and Outputs
You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.
```{r, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
## Embedded Application
It's also possible to embed an entire Shiny application within an R Markdown document using the `shinyAppDir` function. This example embeds a Shiny application located in another directory:
```{r, echo=FALSE}
shinyAppDir(
system.file("examples/06_tabsets", package="shiny"),
options=list(
width="100%", height=550
)
)
```
Note the use of the `height` parameter to determine how much vertical space the embedded application should occupy.
You can also use the `shinyApp` function to define an application inline rather then in an external directory.
In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.
clear
stop()
}
)
}
_
}
}
}}}}}
}
}}}
}}}}}}}}}
help
summary(cars)
plot(cars)
library(visNetwork)
classlist.df <- data.frame(read.csv("bs-cs-tracking-2016.csv",stringsAsFactors = FALSE,strip.white = TRUE,blank.lines.skip = TRUE))
#get list of all classes
stackedClasses <- stack(classlist.df)
allClasses = sort(unique(stackedClasses[1])[,1],decreasing = FALSE)
allClasses = allClasses[-1] #remove empty string at top of list
numClasses <- length(allClasses)
numSubplans <- ncol(classlist.df)
edges.df <- data.frame(from=integer(), to=integer()) #so we can connect subplans to classes
for(r in 1:numClasses){
for(c in 1:numSubplans){
if(is.element(allClasses[r],classlist.df[,c])){
cat(allClasses[r]," is in ",(colnames(classlist.df))[c],"\n")
edges.df <-rbind(edges.df, c(r,c+numClasses))
}
}
}
colnames(edges.df) <- c("from","to")
#what we need
#list of nodes:  nodes include:
#tracks and classes
#list of edges:  contain from and to
nodeList <- c(allClasses,colnames(classlist.df))
sizes <- rep(5,numClasses)
sizes <- c(sizes, rep(15,numSubplans))
nodes.df <- data.frame(1:length(nodeList),nodeList)
colnames(nodes.df) <- c("id","label") #add group
nodes.df$size <- sizes
nodes.df$color.highlight.background <- "orange"
nodes.df$color.highlight.border <- "darkred"
#todo:
#add search feature
#being able to select subplans?
visNetwork(nodes = nodes.df, edges = edges.df)
visNetwork(main = "Subplans and Connecting Classes", nodes = nodes.df, edges = edges.df)
help(visNodes)
nodes.df$font.size = 20
#todo:
#add search feature
#being able to select subplans?
visNetwork(main = "Subplans and Connecting Classes", nodes = nodes.df, edges = edges.df)
?visNodes
nodes.df$font.size = 18
#todo:
#add search feature
#being able to select subplans?
visNetwork(main = "Subplans and Connecting Classes", nodes = nodes.df, edges = edges.df)
library(visNetwork)
classlist.df <- data.frame(read.csv("bs-cs-tracking-2016.csv",stringsAsFactors = FALSE,strip.white = TRUE,blank.lines.skip = TRUE))
#get list of all classes
stackedClasses <- stack(classlist.df)
allClasses = sort(unique(stackedClasses[1])[,1],decreasing = FALSE)
allClasses = allClasses[-1] #remove empty string at top of list
numClasses <- length(allClasses)
numSubplans <- ncol(classlist.df)
edges.df <- data.frame(from=integer(), to=integer()) #so we can connect subplans to classes
for(r in 1:numClasses){
for(c in 1:numSubplans){
if(is.element(allClasses[r],classlist.df[,c])){
#      cat(allClasses[r]," is in ",(colnames(classlist.df))[c],"\n")
edges.df <-rbind(edges.df, c(r,c+numClasses))
}
}
}
colnames(edges.df) <- c("from","to")
#what we need
#list of nodes:  nodes include:
#tracks and classes
#list of edges:  contain from and to
nodeList <- c(allClasses,colnames(classlist.df))
sizes <- rep(5,numClasses)
sizes <- c(sizes, rep(15,numSubplans))
nodes.df <- data.frame(1:length(nodeList),nodeList)
colnames(nodes.df) <- c("id","label") #add group
nodes.df$size <- sizes
nodes.df$sizeLabels <- factor(nodes.df$size, labels = c("small", "large"))
nodes.df$color.highlight.background <- "orange"
nodes.df$color.highlight.border <- "darkred"
nodes.df$color.background <- c("dodgerblue3", "gold")[nodes.df$sizeLabels]
nodes.df$font.size <- 18
#todo:
#add search feature
#being able to select subplans?
visNetwork(main = "Subplans and Connecting Classes", nodes = nodes.df, edges = edges.df)
library(visNetwork)
classlist.df <- data.frame(read.csv("bs-cs-tracking-2016.csv",stringsAsFactors = FALSE,strip.white = TRUE,blank.lines.skip = TRUE))
#get list of all classes
stackedClasses <- stack(classlist.df)
allClasses = sort(unique(stackedClasses[1])[,1],decreasing = FALSE)
allClasses = allClasses[-1] #remove empty string at top of list
numClasses <- length(allClasses)
numSubplans <- ncol(classlist.df)
edges.df <- data.frame(from=integer(), to=integer()) #so we can connect subplans to classes
for(r in 1:numClasses){
for(c in 1:numSubplans){
if(is.element(allClasses[r],classlist.df[,c])){
#      cat(allClasses[r]," is in ",(colnames(classlist.df))[c],"\n")
edges.df <-rbind(edges.df, c(r,c+numClasses))
}
}
}
colnames(edges.df) <- c("from","to")
#what we need
#list of nodes:  nodes include:
#tracks and classes
#list of edges:  contain from and to
nodeList <- c(allClasses,colnames(classlist.df))
sizes <- rep(5,numClasses)
sizes <- c(sizes, rep(15,numSubplans))
nodes.df <- data.frame(1:length(nodeList),nodeList)
colnames(nodes.df) <- c("id","label") #add group
nodes.df$size <- sizes
nodes.df$sizeLabels <- factor(nodes.df$size, labels = c("small", "large"))
nodes.df$color.highlight.background <- "orange"
nodes.df$color.highlight.border <- "darkred"
nodes.df$color.background <- c("dodgerblue3", "gold")[nodes.df$sizeLabels]
nodes.df$font.size <- 18
#todo:
#add search feature
#being able to select subplans?
visNetwork(main = "Subplans and Connecting Classes", nodes = nodes.df, edges = edges.df)
allClasses
help(replace)
help(regex)
help(sub)
stackedClasses <- stack(classlist.df)
gsub("/ +",' ',stackedClasses)
gsub(" +",' ',stackedClasses)
stackedClasses <- stack(classlist.df)
gsub(" +",' ',stackedClasses)
stackedClasses
stackedClasses <- stack(classlist.df)
gsub(" +",' ',stackedClasses)
allClasses = sort(unique(stackedClasses[1])[,1],decreasing = FALSE)
allClasses = allClasses[-1] #remove empty string at top of list
stackedClasses <- stack(classlist.df)
gsub("\s",' ',stackedClasses)
gsub("\s",' ',stackedClasses)
library(visNetwork)
classlist.df <- data.frame(read.csv("bs-cs-tracking-2016.csv",stringsAsFactors = FALSE,strip.white = TRUE,blank.lines.skip = TRUE))
#get list of all classes
stackedClasses <- stack(classlist.df)
gsub("\s","' '",stackedClasses)
allClasses = sort(unique(stackedClasses[1])[,1],decreasing = FALSE)
allClasses = allClasses[-1] #remove empty string at top of list
numClasses <- length(allClasses)
numSubplans <- ncol(classlist.df)
edges.df <- data.frame(from=integer(), to=integer()) #so we can connect subplans to classes
for(r in 1:numClasses){
for(c in 1:numSubplans){
if(is.element(allClasses[r],classlist.df[,c])){
#      cat(allClasses[r]," is in ",(colnames(classlist.df))[c],"\n")
edges.df <-rbind(edges.df, c(r,c+numClasses))
}
}
}
colnames(edges.df) <- c("from","to")
#what we need
#list of nodes:  nodes include:
#tracks and classes
#list of edges:  contain from and to
nodeList <- c(allClasses,colnames(classlist.df))
sizes <- rep(5,numClasses)
sizes <- c(sizes, rep(15,numSubplans))
nodes.df <- data.frame(1:length(nodeList),nodeList)
colnames(nodes.df) <- c("id","label") #add group
nodes.df$size <- sizes
nodes.df$sizeLabels <- factor(nodes.df$size, labels = c("small", "large"))
nodes.df$color.highlight.background <- "orange"
nodes.df$color.highlight.border <- "darkred"
nodes.df$color.background <- c("dodgerblue3", "gold")[nodes.df$sizeLabels]
nodes.df$font.size <- 18
#add search feature
#being able to select subplans?
#todo:
visNetwork(main = "Subplans and Connecting Classes", nodes = nodes.df, edges = edges.df)
